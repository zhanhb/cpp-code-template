set(ALLOWED_CXX_STANDARD "^(03|[147][147]|[258][0369]|[369][258])$")

if ("${CMAKE_VERSION}" VERSION_LESS 3.12)
    macro(add_compile_definitions)
        set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS "${ARGV}")
    endmacro()
endif ()

function(IS_CXX_STANDARD_SUPPORTED version ext ret)
    set(versions)
    if ("x${CMAKE_CXX_COMPILER_ID}" STREQUAL "xMSVC")
        set(prefix "-std:c++")
        list(APPEND versions "${version}")
    else ()
        if (ext)
            set(prefix "-std=gnu++")
        else ()
            set(prefix "-std=c++")
        endif ()
        list(APPEND versions "${version}")
        set(base 11 14 17 20 23 26)
        set(alts 0x 1y 1z 2a 2b 2c)
        list(FIND base "${version}" alt)
        if (alt GREATER -1)
            list(GET alts "${alt}" alt)
            list(APPEND versions "${alt}")
        endif ()
    endif ()
    include(CheckCXXCompilerFlag)
    foreach (alt_ver ${versions})
        set(flag "${prefix}${alt_ver}")
        string(REPLACE + x cache_key "COMPILE_OPTION_${CMAKE_CXX_COMPILER_ID}${flag}_SUPPORT")
        string(REPLACE = _eq_ cache_key "${cache_key}")
        string(REPLACE : _col_ cache_key "${cache_key}")
        string(MAKE_C_IDENTIFIER "${cache_key}" cache_key)
        check_cxx_compiler_flag("\"${flag}\"" "${cache_key}")
        if (${${cache_key}})
            set("${ret}" "${flag}" PARENT_SCOPE)
            return()
        endif ()
    endforeach ()
    set("${ret}" PARENT_SCOPE)
endfunction()

macro(UPDATE_CXX_VERSION var val)
    if ("${${var}}" STREQUAL "")
        set(${var} "${val}")
    elseif ("${val}" STREQUAL "")
    elseif ("${${var}}" MATCHES "${ALLOWED_CXX_STANDARD}")
        if (NOT "${val}" MATCHES "${ALLOWED_CXX_STANDARD}" OR "${${var}}" EQUAL 98)
            set(${var} "${val}")
        elseif ("${${var}}" LESS "${val}" AND NOT "${val}" EQUAL 98)
            set(${var} "${val}")
        endif ()
    endif ()
endmacro()

function(TRY_RESOLVE_BY_COMPILE_OPTION_TEST name std ext ret)
    IS_CXX_STANDARD_SUPPORTED("${std}" "${ext}" enable_flag)
    if (NOT "${enable_flag}" STREQUAL "")
        if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.3)
            target_compile_options("${name}" PRIVATE "$<$<COMPILE_LANGUAGE:CXX>:${enable_flag}>")
        else ()
            target_compile_options("${name}" PRIVATE "${enable_flag}")
        endif ()
        set_property(TARGET "${name}" PROPERTY CXX_STANDARD)
        set("${ret}" 1 PARENT_SCOPE)
        return()
    endif ()
    set("${ret}" PARENT_SCOPE)
endfunction()

if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.1)
    function(TRY_RESOLVE_CXX_STD target std ext ret)
        if (NOT "${std}" MATCHES "${ALLOWED_CXX_STANDARD}")
            set("${ret}" PARENT_SCOPE)
            return()
        endif ()
        if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.8)
            cmake_policy(PUSH)
            cmake_policy(SET CMP0057 NEW)
            if ("cxx_std_${std}" IN_LIST CMAKE_CXX_COMPILE_FEATURES)
                cmake_policy(POP)
                target_compile_features("${target}" PRIVATE "cxx_std_${std}")
                set("${ret}" 1 PARENT_SCOPE)
                return()
            endif ()
            cmake_policy(POP)
        endif ()
        if (NOT "${CMAKE_CXX${std}_COMPILE_FEATURES}" STREQUAL "")
            set_property(TARGET "${target}" PROPERTY CXX_STANDARD "${std}")
            set_property(TARGET "${target}" PROPERTY CXX_STANDARD_REQUIRED TRUE)
            set("${ret}" 1 PARENT_SCOPE)
            return()
        endif ()
        TRY_RESOLVE_BY_COMPILE_OPTION_TEST("${target}" "${std}" "${ext}" result)
        set("${ret}" "${result}" PARENT_SCOPE)
    endfunction()
    function(RESOLVE_REQUIRED target std ext)
        TRY_RESOLVE_CXX_STD("${target}" "${std}" "${ext}" resolved)
        if (NOT resolved)
            set_property(TARGET "${target}" PROPERTY CXX_STANDARD "${std}")
            set_property(TARGET "${target}" PROPERTY CXX_STANDARD_REQUIRED TRUE)
        endif ()
    endfunction()
else ()
    macro(TRY_RESOLVE_CXX_STD target std ext ret)
        if ("${std}" MATCHES "${ALLOWED_CXX_STANDARD}")
            TRY_RESOLVE_BY_COMPILE_OPTION_TEST("${target}" "${std}" "${ext}" ${ret})
        else ()
            set("${ret}")
        endif ()
    endmacro()
    function(RESOLVE_REQUIRED target std ext)
        set(resolved)
        TRY_RESOLVE_CXX_STD("${target}" "${std}" "${ext}" resolved)
        if (NOT resolved)
            set_property(TARGET "${target}" PROPERTY EXCLUDE_FROM_ALL TRUE)
            set_property(TARGET "${target}" PROPERTY EXCLUDE_FROM_DEFAULT_BUILD TRUE)
            set(msg "Target \"${target}\" requires the language dialect \"CXX${std}\"")
            if (ext)
                set(msg "${msg}(with compiler extensions)")
            endif ()
            set(msg "${msg}. But the current compiler \"${CMAKE_CXX_COMPILER_ID}\" does not support this")
            set(msg "${msg}, or CMake does not know the flags to enable it.")
            message(WARNING "${msg}")
        endif ()
    endfunction()
endif ()

function(IMPL_UPDATE_CXX_STANDARD name)
    get_property(optional_version TARGET "${name}" PROPERTY CXX_STANDARD)
    get_property(required TARGET "${name}" PROPERTY CXX_STANDARD_REQUIRED)
    get_property(extensions TARGET "${name}" PROPERTY CXX_EXTENSIONS)

    if (required AND DEFINED optional_version)
        set(required_version "${optional_version}")
    else ()
        set(required_version)
    endif ()

    if (NOT DEFINED extensions)
        if (DEFINED CMAKE_CXX_EXTENSIONS_DEFAULT)
            set(extensions "${CMAKE_CXX_EXTENSIONS_DEFAULT}")
        else ()
            set(extensions ON)
        endif ()
    endif ()

    if ("${ARGC}" GREATER 1)
        UPDATE_CXX_VERSION(required_version "${ARGN}")
        UPDATE_CXX_VERSION(optional_version "${required_version}")
        if (optional_version STREQUAL required_version)
            if (NOT required)
                set(required TRUE)
                set_property(TARGET "${name}" PROPERTY CXX_STANDARD_REQUIRED TRUE)
            endif ()
            set_property(TARGET "${name}" PROPERTY CXX_STANDARD "${required_version}")
        endif ()
    endif ()

    if (NOT DEFINED optional_version)
        if (DEFINED required_version)
            RESOLVE_REQUIRED("${name}" "${required_version}" "${extensions}")
        endif ()
        return()
    endif ()

    if (NOT optional_version MATCHES "${ALLOWED_CXX_STANDARD}")
        RESOLVE_REQUIRED("${name}" "${optional_version}" "${extensions}")
        return()
    endif ()
    if (DEFINED required_version AND NOT required_version MATCHES "${ALLOWED_CXX_STANDARD}")
        RESOLVE_REQUIRED("${name}" "${required_version}" "${extensions}")
        return()
    endif ()

    set(resolved)

    while (1)
        if (DEFINED required_version AND optional_version EQUAL required_version)
            RESOLVE_REQUIRED("${name}" "${required_version}" "${extensions}")
            return()
        endif ()
        TRY_RESOLVE_CXX_STD("${name}" "${optional_version}" "${extensions}" resolved)
        if (resolved)
            return()
        endif ()
        if (optional_version EQUAL 98)
            break()
        endif ()
        if (optional_version GREATER 11)
            math(EXPR optional_version "${optional_version} - 3")
        else ()
            set(optional_version 98)
        endif ()
    endwhile ()
endfunction()

if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.1)
    macro(SET_CMAKE_CXX_STD_PROPERTIES)
    endmacro()
else ()
    macro(SET_CMAKE_CXX_STD_PROPERTIES target)
        if (DEFINED CMAKE_CXX_STANDARD)
            set_target_properties("${target}" PROPERTIES CXX_STANDARD "${CMAKE_CXX_STANDARD}")
        endif ()
        if (DEFINED CMAKE_CXX_STANDARD_REQUIRED)
            set_target_properties("${target}" PROPERTIES CXX_STANDARD_REQUIRED "${CMAKE_CXX_STANDARD_REQUIRED}")
        endif ()
        if (DEFINED CMAKE_CXX_EXTENSIONS)
            set_target_properties("${target}" PROPERTIES CXX_EXTENSIONS "${CMAKE_CXX_EXTENSIONS}")
        endif ()
    endmacro()
endif ()

macro(add_cxx_executable name)
    add_executable("${name}" ${ARGN})
    SET_CMAKE_CXX_STD_PROPERTIES("${name}")
    IMPL_UPDATE_CXX_STANDARD("${name}")
endmacro()

macro(add_stdcxx_executable name standard)
    add_executable("${name}" ${ARGN})
    SET_CMAKE_CXX_STD_PROPERTIES("${name}")
    IMPL_UPDATE_CXX_STANDARD("${name}" "${standard}")
endmacro()
